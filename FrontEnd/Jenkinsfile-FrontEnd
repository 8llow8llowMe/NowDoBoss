pipeline {
    agent any  // 이 파이프라인이 실행될 Jenkins 에이전트를 지정합니다. 'any'는 사용 가능한 임의의 에이전트에서 실행될 수 있음을 의미합니다.
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'USER_NAME', value: '$.pull_request.user.login', expressionType: 'JSONPath'],
                [key: 'IF_MERGED', value: '$.pull_request.merged', expressionType: 'JSONPath'],
                [key: 'BASE_BRANCH', value: '$.pull_request.base.ref', expressionType: 'JSONPath'],
                [key: 'LABEL', value: '$.pull_request.labels[*].name', expressionType: 'JSONPath']
            ],
            causeString: 'Triggered by GitHub Pull Request by ${USER_NAME}',
            token: 'nowdoboss-fe',
            printContributedVariables: false,
            printPostContent: false,
            regexpFilterText: '$IF_MERGED $BASE_BRANCH $LABEL',
            regexpFilterExpression: '(?=.*true)(?=.*develop)(?=.*FE)'
        )
    }
    // tools {
    //     nodejs '20.11.1'
    // }

    stages {
        stage('Setup') {
            steps {
                script {
                    // 빌드 설명 설정
                    currentBuild.description = "Merge requested by: ${env.USER_NAME}"
                }
            }
        }

        stage('Verify Webhook Payload') {
            steps {
                script {
                    echo "User Name: ${env.USER_NAME}"
                    echo "If Merged: ${env.IF_MERGED}"
                    echo "Base Branch: ${env.BASE_BRANCH}"
                    echo "Label: ${env.LABEL}"
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    echo "certbot 컨테이너 실행 상태 확인 중..."
                    def isCertBotRunning = sh(script: "docker ps --filter name=nowdoboss-certbot --filter status=running --format '{{.Names}}'", returnStdout: true).trim()
                    echo "certbot 실행 상태: ${isCertBotRunning}"

                    echo "geoip 컨테이너 실행 상태 확인 중..."
                    def isGeoIPRunning = sh(script: "docker ps --filter name=geoip --filter status=running --format '{{.Names}}'", returnStdout: true).trim()
                    echo "geoip 실행 상태: ${isGeoIPRunning}"
                    
                    dir('FrontEnd') {
                        if (isCertBotRunning == "") {
                            echo "certbot dockerfile 빌드..."
                            sh "docker-compose -f docker-compose-frontend.yml --env-file frontend-env/.env-frontend up --build -d nowdoboss_certbot_service"
                        }

                        if (isGeoIPRunning == "") {
                            echo "geoip dockerfile 빌드..."
                            sh "docker-compose -f docker-compose-frontend.yml --env-file frontend-env/.env-frontend up --build -d geoip_service"
                        }

                        sh """
                            docker-compose -f docker-compose-frontend.yml --env-file frontend-env/.env-frontend stop nowdoboss_frontend_service
                            docker-compose -f docker-compose-frontend.yml --env-file frontend-env/.env-frontend rm -f nowdoboss_frontend_service
                            docker volume rm nowdoboss_react_build || true
                        """

                        // React 빌드 및 Nginx 서비스 시작
                        sh "docker-compose -f docker-compose-frontend.yml --env-file frontend-env/.env-frontend up --build -d nowdoboss_react_service nowdoboss_frontend_service"
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // React 빌드 컨테이너 정리ss
                    sh "docker stop nowdoboss-react || true"
                    sh "docker rm nowdoboss-react || true"
                }
            }
        }

        // stage('SonarQube Analysis - React') {
        //     steps {
        //         dir('FrontEnd') {    
        //             withSonarQubeEnv('SonarQube Server') {
        //                 sh 'npm install'
        //                 sh 'npm run sonarqube'
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            cleanWs() // 작업 공간 정리
        }
    }
}
