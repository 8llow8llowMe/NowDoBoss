pipeline {
    agent any  // 이 파이프라인이 실행될 Jenkins 에이전트를 지정합니다. 'any'는 사용 가능한 임의의 에이전트에서 실행될 수 있음을 의미합니다.
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'USER_NAME', value: '$.pull_request.user.login', expressionType: 'JSONPath'],
                [key: 'IF_MERGED', value: '$.pull_request.merged', expressionType: 'JSONPath'],
                [key: 'BASE_BRANCH', value: '$.pull_request.base.ref', expressionType: 'JSONPath'],
                [key: 'LABEL', value: '$.pull_request.labels[*].name', expressionType: 'JSONPath']
            ],
            causeString: 'Triggered by GitHub Pull Request by ${USER_NAME}',
            token: 'nowdoboss-fe-react',
            printContributedVariables: false,
            printPostContent: false,
            regexpFilterText: '$IF_MERGED $BASE_BRANCH $LABEL',
            regexpFilterExpression: '(?=.*true)(?=.*develop)(?=.*FE)'
        )
    }
    // tools {
    //     nodejs '20.11.1'
    // }

    stages {
        stage('Setup') {
            steps {
                script {
                    // 빌드 설명 설정
                    currentBuild.description = "Merge requested by: ${env.USER_NAME}"
                }
            }
        }

        stage('Verify Webhook Payload') {
            steps {
                script {
                    echo "User Name: ${env.USER_NAME}"
                    echo "If Merged: ${env.IF_MERGED}"
                    echo "Base Branch: ${env.BASE_BRANCH}"
                    echo "Label: ${env.LABEL}"
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    echo "certbot 컨테이너 실행 상태 확인 중..."
                    def isCertBotRunning = sh(script: "docker ps --filter name=nowdoboss-certbot --filter status=running --format '{{.Names}}'", returnStdout: true).trim()
                    echo "certbot 실행 상태: ${isCertBotRunning}"
                    if (isCertBotRunning == "") {
                        echo "certbot dockerfile 빌드..."
                        sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml up --build -d nowdoboss_certbot_service"
                    }

                    // echo "geoip 컨테이너 실행 상태 확인 중..."
                    // def isGeoIPRunning = sh(script: "docker ps --filter name=geoip --filter status=running --format '{{.Names}}'", returnStdout: true).trim()
                    // echo "geoip 실행 상태: ${isGeoIPRunning}"
                    // if (isGeoIPRunning == "") {
                    //     echo "geoip dockerfile 빌드..."
                    //     sh "docker-compose --env-file ./FrontEnd/.env-docker-compose-geoip -f ./FrontEnd/docker-compose-frontend.yml up --build -d geoip_service"
                    // }
                    
                    // React Nginx 컨테이너를 종료하고 관련 볼륨을 삭제합니다. 이 단계는 이전에 생성된 데이터를 클리어하고 새로운 정적 파일을 적용하기 위해 필요합니다. (서비스명)
                    sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml down --volumes nowdoboss_react_service nowdoboss_frontend_service"
                    // React Nginx 컨테이너를 재빌드하고 백그라운드에서 실행합니다. `--build` 옵션은 이미지를 다시 빌드하고, `-d`는 백그라운드 모드에서 실행합니다. (서비스명)
                    sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml up --build -d nowdoboss_react_service nowdoboss_frontend_service"

                    // React 컨테이너가 빌드 작업을 완료한 후에는 종료해야 합니다. (서비스명)
                    sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml stop nowdoboss_react_service"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // nowdoboss-react 컨테이너를 종료하고 삭제합니다. (컨테이너명)
                    sh "docker stop nowdoboss-react || true" // 컨테이너가 실행 중이지 않더라도 오류를 무시합니다.
                    sh "docker rm nowdoboss-react || true" // 컨테이너를 삭제합니다.
                }
            }
        }

        // stage('SonarQube Analysis - ReactServer') {
        //     steps {
        //         dir('FrontEnd') {    
        //             withSonarQubeEnv('SonarQube Server') {
        //                 sh 'npm install'
        //                 sh 'npm run sonarqube'
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            cleanWs() // 작업 공간 정리
        }
    }
}
