x-kafka-environment: &kafka_environment
  KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_DEFAULT_REPLICATION_FACTOR}
  KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
  KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
  KAFKA_COMPRESSION_TYPE: ${KAFKA_COMPRESSION_TYPE}
  KAFKA_SEGMENT_BYTES: ${KAFKA_SEGMENT_BYTES}
  KAFKA_HEAP_OPTS: ${KAFKA_HEAP_OPTS}
  TZ: ${TZ}

services:
  # MySQL 설정
  mysql_service:
    image: mysql:latest
    container_name: mysql
    restart: always
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - nowdoboss-net


  # Redis 설정
  nowdoboss_redis_service:
    image: redis
    container_name: nowdoboss-redis
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - nowdoboss-net
    command: ["sh", "-c", "redis-server --notify-keyspace-events Ex"]

  # SonarQube 설정
  sonarqube_service:
    image: sonarqube:latest
    container_name: sonarqube
    restart: always
    ports:
      - "${SONARQUBE_PORT}:${SONARQUBE_PORT}"
    networks:
      - nowdoboss-net

  # zookeeper 설정
  zookeeper:
    image: confluentinc/cp-zookeeper:latest.arm64
    container_name: zookeeper
    restart: always
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - nowdoboss-net

  # kafka-1 설정
  kafka-1:
    image: confluentinc/cp-kafka:latest.arm64
    container_name: kafka-1
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_1_PORT}:${KAFKA_1_PORT}"
    environment:
      <<: *kafka_environment  # Kafka 관련 공통 설정값 가져오기
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID_1}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:${KAFKA_INTERNAL_PORT_1},EXTERNAL://localhost:${KAFKA_1_PORT}
    networks:
      - nowdoboss-net

  # kafka-2 설정
  kafka-2:
    image: confluentinc/cp-kafka:latest.arm64
    container_name: kafka-2
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_2_PORT}:${KAFKA_2_PORT}"
    environment:
      <<: *kafka_environment  # Kafka 관련 공통 설정값 가져오기
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID_2}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:${KAFKA_INTERNAL_PORT_2},EXTERNAL://localhost:${KAFKA_2_PORT}
    networks:
      - nowdoboss-net

  # kafka-3 설정
  kafka-3:
    image: confluentinc/cp-kafka:latest.arm64
    container_name: kafka-3
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_3_PORT}:${KAFKA_3_PORT}"
    environment:
      <<: *kafka_environment  # Kafka 관련 공통 설정값 가져오기
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID_3}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:${KAFKA_INTERNAL_PORT_3},EXTERNAL://localhost:${KAFKA_3_PORT}
    networks:
      - nowdoboss-net

  # kafka-ui 설정
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT}:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTER_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_UI_BOOTSTRAP_SERVERS}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      TZ: ${TZ}
    networks:
      - nowdoboss-net

  # MongoDB 설정
  mongodb_service:
    image: arm64v8/mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - nowdoboss-net

  # Portainer 설정
  portainer_service:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "${PORTAINER_PORT}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - nowdoboss-net

  # Fail2Ban 설정
  fail2ban_service:
    build:
      context: ./Fail2Ban  # Dockerfile이 위치한 경로
      dockerfile: fail2ban.Dockerfile  # 직접 빌드할 Dockerfile
    container_name: fail2ban
    restart: always
    cap_add:
      - NET_ADMIN  # 네트워크 관리를 위한 권한 추가 (필수)
    volumes:
      - /var/log:/var/log:ro  # 호스트 로그 파일을 읽기 전용으로 마운트
      - /var/run/docker.sock:/var/run/docker.sock  # Docker 소켓 (컨테이너 차단 시 필요)
    environment:
      - TZ=Asia/Seoul
    networks:
      - nowdoboss-net
      
  # Prometheus 설정
  prometheus_service:
    build:
      context: ./Prometheus # 해당 Dockerfile이 위치한 경로
      dockerfile: prometheus.Dockerfile # 직접 빌드할 Dockerfile명
    container_name: prometheus
    restart: always
    volumes:
      - prometheus_data:/prometheus  # Prometheus 데이터 저장소
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"  # Prometheus 웹 UI 포트
    command:
      - '--web.enable-lifecycle' # Prometheus의 라이프사이클 관련 엔드포인트를 활성화
      - '--config.file=/etc/prometheus/prometheus.yml' # Prometheus가 사용할 설정 파일을 지정
      - '--storage.tsdb.path=/prometheus'  # 데이터 저장 경로
    networks:
      - nowdoboss-net  # Spring Boot 서비스와 같은 네트워크 사용

  # Grafana 설정
  grafana_service:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports: 
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}  # 기본 관리자 패스워드 설정
    volumes:
      - grafana_data:/var/lib/grafana  # Grafana 데이터 저장소
    networks:
      - nowdoboss-net  # Prometheus와 같은 네트워크 사용

  # MySQL Exporter 설정
  mysql_exporter_service:
    image: prom/mysqld-exporter:latest
    container_name: mysql_exporter
    restart: always
    ports:
      - "${MYSQL_EXPORTER_PORT}:${MYSQL_EXPORTER_PORT}" # MySQL Exporter의 기본 포트
    environment:
      DATA_SOURCE_NAME: "${MYSQL_EXPORTER_USER}:${MYSQL_EXPORTER_PASSWORD}@(${MYSQL_EXPORTER_HOST}:${MYSQL_PORT})/"
    depends_on:
      - mysql_service
    networks:
      - nowdoboss-net

volumes:
  mysql_data:
  mongo_data:
  portainer_data:
  prometheus_data:
  grafana_data:

networks:
  nowdoboss-net:
    name: nowdoboss-net
    driver: bridge
