services:
  # Redis 설정
  nowdoboss_redis_service:
    image: redis # 사용할 Docker 이미지. 이 경우 공식 Redis 이미지를 사용합니다.
    container_name: nowdoboss-redis # 생성될 Docker 컨테이너의 이름을 지정합니다.
    restart: always # 컨테이너가 실패하거나 Docker가 재시작될 때 자동으로 컨테이너를 재시작하도록 설정합니다.
    ports:
      - "6379:6379" # Redis 서버의 기본 포트 6379를 호스트의 같은 포트에 바인딩합니다. 이 설정은 외부에서 Redis 서버에 접근할 수 있게 합니다.
    networks:
      - nowdoboss-net # 이 컨테이너가 연결될 네트워크. 이 네트워크 설정을 통해 다른 서비스와의 네트워크 분리 및 통신을 관리합니다.
    command: ["sh", "-c", "redis-server --notify-keyspace-events Ex"]

  # SonarQube 설정
  sonarqube_service:
    image: sonarqube:latest
    container_name: sonarqube
    restart: always
    ports:
      - "9000:9000"
    networks:
      - nowdoboss-net # 이 컨테이너가 연결될 네트워크. 이 네트워크 설정을 통해 다른 서비스와의 네트워크 분리 및 통신을 관리합니다.

  # zookeeper 설정
  zookeeper:
    image: confluentinc/cp-zookeeper:latest.arm64
    container_name: zookeeper
    ports:
      - "32181:32181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - nowdoboss-net

  # kafka-1 설정
  kafka-1:
    image: confluentinc/cp-kafka:latest.arm64
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      TZ: Asia/Seoul
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:29092,EXTERNAL://localhost:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3 # 자동으로 생성되는 topic의 기본 복제 수 (브로커수)
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_HOURS: 24 # 메시지 보존 기간을 24시간으로 설정
      KAFKA_COMPRESSION_TYPE: "gzip" # 메시지 압축 방식 설정
      KAFKA_SEGMENT_BYTES: 1073741824 # 로그 세그먼트 크기를 1GB로 설정
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m" # JVM 힙 메모리 설정
    networks:
      - nowdoboss-net

  # kafka-2 설정
  kafka-2:
    image: confluentinc/cp-kafka:latest.arm64
    container_name: kafka-2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      TZ: Asia/Seoul
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:29093,EXTERNAL://localhost:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3 # 자동으로 생성되는 topic의 기본 복제 수 (브로커수)
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_HOURS: 24 # 메시지 보존 기간을 24시간으로 설정
      KAFKA_COMPRESSION_TYPE: "gzip" # 메시지 압축 방식 설정
      KAFKA_SEGMENT_BYTES: 1073741824 # 로그 세그먼트 크기를 1GB로 설정
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m" # JVM 힙 메모리 설정
    networks:
      - nowdoboss-net

  # kafka-3 설정
  kafka-3:
    image: confluentinc/cp-kafka:latest.arm64
    container_name: kafka-3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      TZ: Asia/Seoul
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:29094,EXTERNAL://localhost:9094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3 # 자동으로 생성되는 topic의 기본 복제 수 (브로커수)
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_HOURS: 24 # 메시지 보존 기간을 24시간으로 설정
      KAFKA_COMPRESSION_TYPE: "gzip" # 메시지 압축 방식 설정
      KAFKA_SEGMENT_BYTES: 1073741824 # 로그 세그먼트 크기를 1GB로 설정
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m" # JVM 힙 메모리 설정
    networks:
      - nowdoboss-net

  # kafka-ui 설정
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - TZ=Asia/Seoul
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:29092,kafka-2:29093,kafka-3:29094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:32181
    networks:
      - nowdoboss-net

  # MongoDB 설정
  mongodb_service:
    image: arm64v8/mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: 8llow8llowme
      MONGO_INITDB_ROOT_PASSWORD: 8llow8llowme
    volumes:
      - mongo_data:/data/db
    networks:
      - nowdoboss-net

  # Portainer 설정
  portainer_service:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "9001:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - nowdoboss-net

  # Fail2Ban 설정
  fail2ban_service:
    build:
      context: ./Fail2Ban  # Dockerfile이 위치한 경로
      dockerfile: fail2ban.Dockerfile  # 직접 빌드할 Dockerfile
    container_name: fail2ban
    restart: always
    cap_add:
      - NET_ADMIN  # 네트워크 관리를 위한 권한 추가 (필수)
    volumes:
      - /var/log:/var/log:ro  # 호스트 로그 파일을 읽기 전용으로 마운트
      - /var/run/docker.sock:/var/run/docker.sock  # Docker 소켓 (컨테이너 차단 시 필요)
    environment:
      - TZ=Asia/Seoul
    networks:
      - nowdoboss-net
      
  # Prometheus 설정
  prometheus_service:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/  # 설정 파일이 들어있는 디렉토리를 통째로 마운트
      - prometheus_data:/prometheus  # Prometheus 데이터 저장소
    ports:
      - "9090:9090"  # Prometheus 웹 UI 포트
    command:
      - '--web.enable-lifecycle' # Prometheus의 라이프사이클 관련 엔드포인트를 활성화
      - '--config.file=/etc/prometheus/prometheus.yml' # Prometheus가 사용할 설정 파일을 지정합니다.
      - '--storage.tsdb.path=/prometheus'  # 데이터 저장 경로
    networks:
      - nowdoboss-net  # Spring Boot 서비스와 같은 네트워크 사용

volumes:
  mongo_data:
  portainer_data:
  prometheus_data:

networks:
  nowdoboss-net:
    name: nowdoboss-net
    driver: bridge
