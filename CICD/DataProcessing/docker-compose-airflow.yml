x-airflow-environment: &airflow_environment
  AIRFLOW_EXECUTOR: ${AIRFLOW_EXECUTOR}
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
  AIRFLOW_UID: ${AIRFLOW_UID}
  AIRFLOW_GID: ${AIRFLOW_GID}
  TZ: ${TZ}
  MONGO_DB_HOST: ${MONGO_DB_HOST}
  MONGO_DB_DATABASE: ${MONGO_DB_DATABASE}
  MONGO_DB_USERNAME: ${MONGO_DB_USERNAME}
  MONGO_DB_PASSWORD: ${MONGO_DB_PASSWORD}
  MONGO_DB_AUTHENTICATION_DATABASE: ${MONGO_DB_AUTHENTICATION_DATABASE}
  MONGO_DB_PORT: ${MONGO_DB_PORT}

services:
  airflow-init:
    container_name: airflow-init
    build:
      context: ./airflow
      dockerfile: airflow.Dockerfile
    image: airflow-img
    environment:
      <<: *airflow_environment
      AIRFLOW_ADMIN_USER: ${AIRFLOW_ADMIN_USER}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    entrypoint: /bin/bash
    command: >
      -c "
      echo '[airflow-init] Initializing Airflow DB...' &&
      airflow db init &&
      echo '[airflow-init] Creating Admin user...' &&
      airflow users create
        --username ${AIRFLOW_ADMIN_USER}
        --password ${AIRFLOW_ADMIN_PASSWORD}
        --firstname Airflow
        --lastname Admin
        --role Admin
        --email ${AIRFLOW_ADMIN_EMAIL}
      "
    networks:
      - nowdoboss-net

  airflow-scheduler:
    container_name: airflow-scheduler
    build:
      context: ./airflow
      dockerfile: airflow.Dockerfile
    image: airflow-img
    restart: always
    depends_on:
      - airflow-init
    environment:
      <<: *airflow_environment
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    networks:
      - nowdoboss-net

  airflow-webserver:
    container_name: airflow-webserver
    build:
      context: ./airflow
      dockerfile: airflow.Dockerfile
    image: airflow-img
    restart: always
    depends_on:
      - airflow-scheduler
    environment:
      <<: *airflow_environment
    ports:
      - '${AIRFLOW_WEB_PORT}:8080'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: webserver
    networks:
      - nowdoboss-net

networks:
  nowdoboss-net:
    name: nowdoboss-net
    driver: bridge
