server:
  https-url: ${SERVER_HTTPS_URL}
  fast-api-url: ${SERVER_FAST_API_URL}
  port: ${SPRING_BOOT_PORT}

spring:
  servlet:
    # file 업로드 관련 세팅 (명시적으로 설정 안할 시 Spring boot는 기본적으로 1MB로 설정됨)
    multipart:
      max-file-size: 10MB  # 최대 파일 크기
      max-request-size: 10MB  # 최대 요청 크기

  jpa:
    open-in-view: false
    defer-datasource-initialization: false  # flyway 관련 마이그레이션 이슈 -> false로 변경
    generate-ddl: false
    hibernate:
      ddl-auto: none                # ddl 자동 작성 여부
    properties:
      hibernate:
        format_sql: true             # 하이버네이트가 실행한 SQL을 출력할 때 보기 좋게 정렬
        use_sql_comments: true
        show_sql: true               # 하이버네이트가 실행한 SQL을 출력
        jdbc:
          batch_size: 100              #   insert/update 쿼리를 원하는 개수만큼 모아서 DB에 날릴 수 있는 옵션
        default_batch_fetch_size: 100

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver  # DB 드라이버
    url: ${MYSQL_DB_URL}       # 데이터베이스 URL
    username: ${MYSQL_DB_USERNAME}             # 데이터베이스 계정명
    password: ${MYSQL_DB_PASSWORD}             # 데이터베이스 계정 비밀번호

  # NoSQL setting
  data:
    # Redis setting
    redis:
      host: nowdoboss-redis # Redis 도커 컨테이너의 이름을 사용하여 접근 (같은 네트워크로 묶여야함)
      port: 6379

    # MongoDB setting
    mongodb:
      host: ${MONGO_DB_HOST} # MongoDB 도커 컨테이너의 이름을 사용하여 접근
      port: 27017
      database: ${MONGO_DB_DATABASE}
      username: ${MONGO_DB_USERNAME}
      password: ${MONGO_DB_PASSWORD}
      authentication-database: ${MONGO_DB_AUTHENTICATION_DATABASE}

  # Java Mail Sender setting (Google Mail)
  mail:
    host: ${JAVA_MAIL_HOST}
    port: 587
    username: ${JAVA_MAIL_USERNAME}
    password: ${JAVA_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # Kafka setting
  kafka:
    bootstrap-servers: kafka-1:29092, kafka-2:29093, kafka-3:29094 # 도커에서 설정한 내부 서비스명으로 접근 (내부 네트워크 이용)
    consumer:
      group-id: NowDoBossGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer


  # flyway setting
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    out-of-order: false

  mvc:
    async:
      request-timeout: 3000000

# log 관리
logging:
  level:
    org.hibernate:
      type.descriptor.sql: trace
      org.hibernate.SQLQuery: debug

# jwt setting
jwt:
  accessKey: ${JWT_ACCESS_KEY}
  refreshKey: ${JWT_REFRESH_KEY}
  accessExpiration: PT420M  # 420분 (PT420M)
  refreshExpiration: PT10080M  # 10080분 (7일) (PT10080M)

# firebase setting
app:
  firebase-configuration-file: classpath:backend-env/serviceAccountKey.json
  firebase-bucket: ${FIREBASE_BUCKET}
  firebase-project-id: ${FIREBASE_PROJECT_ID}

# OAUTH2.0 Setting
oauth:
  kakao:
    client-id: ${OAUTH_KAKAO_CLIENT_ID}   # REST API 키
    client-secret: ${OAUTH_KAKAO_CLIENT_SECRET} # 보안 -> Client Secret 키
    redirect-uri: ${server.https-url}/member/loading/kakao
    scope:
      - profile_nickname
      - profile_image
      - account_email
  #      - name

  naver:
    client-id: ${OAUTH_NAVER_CLIENT_ID}
    client-secret: ${OAUTH_NAVER_CLIENT_SECRET}
    redirect_uri: ${server.https-url}/member/loading/naver
    scope:
      - nickname
      - name
      - email
      - profile_image

  google:
    client_id: ${OAUTH_GOOGLE_CLIENT_ID}
    client_secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
    redirect_uri: ${server.https-url}/member/loading/google
    scope:
      - profile
      - email

# Prometheus Actuator Setting
management:
  endpoints:
    web:
      exposure:
        include: "*"  # 모든 Actuator 엔드포인트 노출 (원하는 엔드포인트를 선택적으로 노출 가능)
  endpoint:
    prometheus:
      enabled: true  # Prometheus 엔드포인트 활성화

# Java Simplified Encryption Setting
jasypt:
  encryptor:
    key: ${JASYPT_ENCRYPTOR_KEY}