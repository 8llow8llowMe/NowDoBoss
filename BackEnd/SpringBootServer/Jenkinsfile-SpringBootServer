pipeline {
    agent any  // 이 파이프라인이 실행될 Jenkins 에이전트를 지정합니다. 'any'는 사용 가능한 임의의 에이전트에서 실행될 수 있음을 의미합니다.
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'USER_NAME', value: '$.pull_request.user.login', expressionType: 'JSONPath'],
                [key: 'IF_MERGED', value: '$.pull_request.merged', expressionType: 'JSONPath'],
                [key: 'BASE_BRANCH', value: '$.pull_request.base.ref', expressionType: 'JSONPath'],
                [key: 'LABEL', value: '$.pull_request.labels[*].name', expressionType: 'JSONPath']
            ],
            causeString: 'Triggered by GitHub Pull Request by ${USER_NAME}',
            token: 'nowdoboss-be-springboot',
            printContributedVariables: false,
            printPostContent: false,
            regexpFilterText: '$IF_MERGED $BASE_BRANCH $LABEL',
            regexpFilterExpression: '(?=.*true)(?=.*develop)(?=.*BE-Springboot)'
        )
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // 빌드 설명 설정
                    currentBuild.description = "Merge requested by: ${env.USER_NAME}"
                }
            }
        }

        stage('Verify Webhook Payload') {
            steps {
                script {
                    echo "User Name: ${env.USER_NAME}"
                    echo "If Merged: ${env.IF_MERGED}"
                    echo "Base Branch: ${env.BASE_BRANCH}"
                    echo "Label: ${env.LABEL}"
                }
            }
        }

        // 빌드 단계: JAR 파일을 생성하고 아티팩트로 저장
        stage('Build') {
            steps {
                dir('BackEnd/SpringBootServer') {
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean bootJar"  // 프로젝트를 Fat JAR로 빌드
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/build/libs/*.jar', allowEmptyArchive: true  // 빌드 아티팩트를 저장
                }
            }
        }

        stage('Deploy with Docker Compose') { 
            steps {
                script {
                    dir('BackEnd/SpringBootServer') {
                        echo "Blue/Green 전략을 이용한 배포 진행"
                        sh "chmod +x deploy_blue_green.sh"
                        sh "./deploy_blue_green.sh"
                    }
                }
            }
        }

        // stage('SonarQube Analysis - SpringBootServer') {
        //     steps {
        //         dir('BackEnd/SpringBootServer') {    
        //             withSonarQubeEnv('SonarQube Server') {
        //                 sh 'chmod +x ./gradlew'
        //                 sh './gradlew sonar -Dsonar.projectKey=nowdoboss'
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            cleanWs() // 작업 공간 정리
        }
    }
}
